"""
Django settings for greatkartecommerce project.

Generated by 'django-admin startproject' using Django 5.1.7.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

from pathlib import Path
import os
from configurations import Configuration, values
from django.contrib.messages import constants as messages
from decouple import config



class Dev(Configuration):

        # Build paths inside the project like this: BASE_DIR / 'subdir'.
        BASE_DIR = Path(__file__).resolve().parent.parent


        # Quick-start development settings - unsuitable for production
        # See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

        # SECURITY WARNING: keep the secret key used in production secret!
        SECRET_KEY = config('SECRET_KEY')

        # SECURITY WARNING: don't run with debug turned on in production!
        DEBUG = config('DEBUG', default=False, cast=bool)

        ALLOWED_HOSTS = []


        # Application definition

        INSTALLED_APPS = [
            'django.contrib.admin',
            'django.contrib.auth',
            'django.contrib.contenttypes',
            'django.contrib.sessions',
            'django.contrib.messages',
            'django.contrib.staticfiles',
            'greatkart',
            'category',
            'accounts',
            'store',
            'carts',
            'orders',
            'admin_honeypot',  # Honeypot for admin login
           
        ]

        MIDDLEWARE = [
            'django.middleware.security.SecurityMiddleware',
            'django.contrib.sessions.middleware.SessionMiddleware',
            'django.middleware.common.CommonMiddleware',
            'django.middleware.csrf.CsrfViewMiddleware',
            'django.contrib.auth.middleware.AuthenticationMiddleware',
            'django.contrib.messages.middleware.MessageMiddleware',
            'django.middleware.clickjacking.XFrameOptionsMiddleware',
            'django_session_timeout.middleware.SessionTimeoutMiddleware', # session timeout middleware

        ]

        SESSION_EXPIRE_SECONDS = 3600  # Session timeout in seconds (e.g., 60 seconds = 1 minute)
        SESSION_EXPIRE_AFTER_LAST_ACTIVITY = True # Expire session after last activity
        SESSION_TIMEOUT_REDIRECT = 'accounts/login'  # Redirect to login page after timeout

        ROOT_URLCONF = 'greatkartecommerce.urls'

        TEMPLATES = [
            {
                'BACKEND': 'django.template.backends.django.DjangoTemplates',
                'DIRS': [BASE_DIR / 'templates'],  # Add your templates directory here
                'APP_DIRS': True,
                'OPTIONS': {
                    'context_processors': [
                        'django.template.context_processors.debug',
                        'django.template.context_processors.request',
                        'django.contrib.auth.context_processors.auth',
                        'django.contrib.messages.context_processors.messages',
                        'category.context_processors.menu_links',  # Add your custom context processor here
                        'carts.context_processors.counter',  # Add your custom context processor here
                    ],
                },
            },
        ]

        WSGI_APPLICATION = 'greatkartecommerce.wsgi.application'

        AUTH_USER_MODEL = 'accounts.Account'    # Custom user model for authentication
        # https://docs.djangoproject.com/en/5.1/topics/auth/customizing/#specifying-a-custom-user-model


        # Database
        # https://docs.djangoproject.com/en/5.1/ref/settings/#databases

        DATABASES = {
            'default': {
                'ENGINE': 'django.db.backends.sqlite3',
                'NAME': BASE_DIR / 'db.sqlite3',
            }
        }


        # Password validation
        # https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

        AUTH_PASSWORD_VALIDATORS = [
            {
                'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
            },
            {
                'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
            },
            {
                'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
            },
            {
                'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
            },
        ]


        # Internationalization
        # https://docs.djangoproject.com/en/5.1/topics/i18n/

        LANGUAGE_CODE = 'en-us'

        TIME_ZONE = 'UTC'

        USE_I18N = True

        USE_TZ = True


        # Static files (CSS, JavaScript, Images)
        # https://docs.djangoproject.com/en/5.1/howto/static-files/

        STATIC_URL = 'static/'  # URL prefix for static files
        # Note: In development, you may want to use `python manage.py runserver` to serve static files automatically.
        STATICFILES_DIRS = [
              BASE_DIR / "greatkart/static",
              ]  # Add your static files directory here

        # Media files (e.g., uploaded files)
        MEDIA_URL = '/media/'
        MEDIA_ROOT = BASE_DIR / 'media'  # Directory where uploaded files will be stored


        

        # Default primary key field type
        # https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

        DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

        MESSAGE_TAGS = {
            messages.ERROR: 'danger',
        }

        # Email configuration
        EMAIL_BACKEND = config('EMAIL_BACKEND', default='django.core.mail.backends.smtp.EmailBackend')
        EMAIL_HOST = config('EMAIL_HOST', default='smtp.gmail.com')
        EMAIL_PORT = config('EMAIL_PORT', default=587, cast=int)  # Use 587 for TLS
        EMAIL_HOST_USER = config('EMAIL_HOST_USER')
        EMAIL_HOST_PASSWORD = config('EMAIL_HOST_PASSWORD')
        EMAIL_USE_TLS = config('EMAIL_USE_TLS', default=True, cast=bool)  # Use TLS instead of SSL
        EMAIL_USE_SSL = config('EMAIL_USE_SSL', default=False, cast=bool)  # Ensure SSL is disabled

        # Fallback email backend for development
        if DEBUG:
            EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'


class Prod(Dev):
    """
    Production settings
    """
    DEBUG = values.BooleanValue(False)  # Set to True for development, False for production
    SECRET_KEY = values.SecretValue()
